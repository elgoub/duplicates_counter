(function() {  var form = document.getElementById('form');  form.addEventListener('submit', function(e) {    e.preventDefault();        var keywords    = form['keywords'].value;    var description = form['description'].value;    render(keywords, description);  }, false);  function render(keywords, description) {    var errors = [], result = [];    if (keywords == null || keywords.length == 0) {        errors.push('Keywords are required.');    }    if (description == null || description.length == 0) {        errors.push('Description is required.');    }    // Count duplicated keywords    if (errors.length == 0) {      var array = keywords.trim().split(',');      result = _.map(array, function(keyword){        var re    = new RegExp(keyword, 'g');        var count = (description.match(re)||[]).length;        return {keyword: keyword, count: count};      });      result = _.sortBy(result, 'count').reverse();    }    // Rendering    // React.render(    //   <div>    //     <h1>Output</h1>    //     <ErrorBox errors={errors}/>    //     <Result result={result}/>    //   </div>,    //   document.getElementById('output')    // );  }    // Rendering    React.render(      <div>        <h1>Output</h1>        <ErrorBox errors={[]}/>        <Result result={[]}/>      </div>,      document.getElementById('output')    );  // React Components  var ErrorBox = React.createClass({    render: function() {      var errorNodes = this.props.errors.map(function (error) {        return (          <p>            {error}          </p>        );      });      return (        <div className="test">          {errorNodes}        </div>      );    }  });  var Result = React.createClass({    componentDidMount: function() {      console.log('componentDidMount');      var data = {          labels: _.pluck(this.state.result, 'keyword'),          datasets: [              {                  label: "My First dataset",                  fillColor: "rgba(220,220,220,0.2)",                  strokeColor: "rgba(220,220,220,1)",                  pointColor: "rgba(220,220,220,1)",                  pointStrokeColor: "#fff",                  pointHighlightFill: "#fff",                  pointHighlightStroke: "rgba(220,220,220,1)",                  data: _.pluck(this.state.result, 'count')              }          ]      };      var options = {        scaleOverride : true,        scaleSteps : 15,        scaleStepWidth : 1,        scaleStartValue : 0,        animation : true,        scaleLabel : '<%=value%>',        showTooltips: false,        pointDot : false,        bezierCurve : false      }      var ctx   = document.getElementById('chart').getContext('2d');      var chart = new Chart(ctx).Line(data, options);    },    render: function() {      console.log('render');      var keywordsNodes = this.props.result.map(function (data) {        return (          <p>            {data.keyword + ': ' + data.count}          </p>        );      });      return (        <div>          <canvas id="chart" width="600" height="400"></canvas>          <div className="output-keywords">            {keywordsNodes}          </div>        </div>      );    }  });}).call(this);console.log(1);